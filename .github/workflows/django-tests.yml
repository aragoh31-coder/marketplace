name: Django Tests & Code Quality

on:
  push:
    branches: [ main, develop, cursor/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client libpq-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy coverage
    
    - name: Set up environment variables
      run: |
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> $GITHUB_ENV
    
    - name: Run linting checks
      run: |
        echo "Running flake8..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        
        echo "Running black check..."
        black --check --diff .
        
        echo "Running isort check..."
        isort --check-only --diff .
    
    - name: Run type checking
      run: |
        echo "Running mypy..."
        mypy core/ --ignore-missing-imports --no-strict-optional
    
    - name: Run Django tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        DEBUG: True
        SECRET_KEY: test-secret-key-for-github-actions
      run: |
        python manage.py collectstatic --noinput
        python manage.py test --verbosity=2 --parallel=2
        
    - name: Run modular system tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        DEBUG: True
        SECRET_KEY: test-secret-key-for-github-actions
      run: |
        python manage.py test tests.test_modular_system --verbosity=2
        
    - name: Generate coverage report
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        DEBUG: True
        SECRET_KEY: test-secret-key-for-github-actions
      run: |
        coverage run --source='.' manage.py test
        coverage report
        coverage xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security checks
      run: |
        echo "Running bandit security scan..."
        bandit -r . -f json -o bandit-report.json || true
        
        echo "Running safety check..."
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install performance tools
      run: |
        python -m pip install --upgrade pip
        pip install pytest-benchmark locust
    
    - name: Run performance tests
      run: |
        echo "Running benchmark tests..."
        python -m pytest tests/test_modular_system.py::TestModularSystemPerformance -v
        
        echo "Running load tests..."
        python -m locust --headless --users 10 --spawn-rate 2 --run-time 30s --host http://localhost:8000 || true