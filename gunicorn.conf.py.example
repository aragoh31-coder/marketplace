"""
Gunicorn configuration for Django Marketplace
Copy this to gunicorn.conf.py and adjust for your environment
"""

import multiprocessing
import os

# Server socket
bind = "127.0.0.1:8000"
backlog = 2048

# Worker processes
workers = multiprocessing.cpu_count() * 2 + 1
worker_class = "sync"
worker_connections = 1000
timeout = 30
keepalive = 2
max_requests = 1000
max_requests_jitter = 50

# Restart workers
preload_app = True
reload = False

# Process naming
proc_name = "marketplace"

# User and group
user = "ubuntu"
group = "ubuntu"

# Logging
accesslog = "/workspace/logs/gunicorn_access.log"
errorlog = "/workspace/logs/gunicorn_error.log"
loglevel = "info"
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Process IDs
pidfile = "/workspace/logs/gunicorn.pid"

# Environment variables
raw_env = [
    'DJANGO_SETTINGS_MODULE=marketplace.settings',
    'PYTHONPATH=/workspace',
]

# SSL (if using HTTPS)
# keyfile = "/path/to/keyfile"
# certfile = "/path/to/certfile"

# Security
limit_request_line = 4094
limit_request_fields = 100
limit_request_field_size = 8190

# Debugging (disable in production)
spew = False

def on_starting(server):
    """Called just before the master process is initialized."""
    server.log.info("Starting Gunicorn for Django Marketplace")

def on_reload(server):
    """Called to recycle workers during a reload via SIGHUP."""
    server.log.info("Reloading Gunicorn configuration")

def when_ready(server):
    """Called just after the server is started."""
    server.log.info("Gunicorn is ready. Listening on %s", server.address)

def worker_int(worker):
    """Called just after a worker has been interrupted by a signal."""
    worker.log.info("Worker received INT or QUIT signal")

def pre_fork(server, worker):
    """Called just before a worker is forked."""
    server.log.debug("Worker %s about to be forked", worker.pid)

def post_fork(server, worker):
    """Called just after a worker has been forked."""
    server.log.info("Worker %s spawned", worker.pid)

def worker_exit(server, worker):
    """Called just after a worker has been exited."""
    server.log.info("Worker %s exited", worker.pid)