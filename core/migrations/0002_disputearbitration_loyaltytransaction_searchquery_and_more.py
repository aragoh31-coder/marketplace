# Generated by Django 5.1.4 on 2025-08-23 19:14

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0001_initial"),
        ("disputes", "0001_initial"),
        ("orders", "0002_order_buyer_wallet"),
        ("products", "0004_remove_vacation_field"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DisputeArbitration",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "decision",
                    models.CharField(
                        choices=[
                            ("buyer_wins", "Buyer Wins"),
                            ("vendor_wins", "Vendor Wins"),
                            ("split", "Split Decision"),
                            ("inconclusive", "Inconclusive"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "evidence_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                (
                    "order_pattern_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                ("reasoning", models.TextField()),
                ("automated", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "arbitrator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="arbitrations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dispute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="arbitrations", to="disputes.dispute"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Dispute Arbitrations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LoyaltyTransaction",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("points", models.IntegerField()),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[("earned", "Earned"), ("spent", "Spent"), ("bonus", "Bonus"), ("penalty", "Penalty")],
                        max_length=20,
                    ),
                ),
                ("reason", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "order",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="orders.order"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="loyalty_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SearchQuery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("query", models.CharField(max_length=500)),
                ("filters", models.JSONField(default=dict)),
                ("results_count", models.IntegerField()),
                ("clicked_results", models.JSONField(default=list)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="search_queries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Search Queries",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserPreferenceProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("purchase_patterns", models.JSONField(default=dict)),
                (
                    "price_sensitivity",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("very_high", "Very High"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("category_affinity", models.JSONField(default=dict)),
                ("vendor_preferences", models.JSONField(default=dict)),
                ("temporal_patterns", models.JSONField(default=dict)),
                (
                    "risk_profile",
                    models.CharField(
                        choices=[
                            ("conservative", "Conservative"),
                            ("moderate", "Moderate"),
                            ("aggressive", "Aggressive"),
                        ],
                        default="moderate",
                        max_length=20,
                    ),
                ),
                ("loyalty_indicators", models.JSONField(default=dict)),
                (
                    "churn_risk",
                    models.FloatField(
                        default=0.5,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="preference_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "User Preference Profiles",
            },
        ),
        migrations.CreateModel(
            name="LoyaltyPoints",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("points", models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("bronze", "Bronze"),
                            ("silver", "Silver"),
                            ("gold", "Gold"),
                            ("platinum", "Platinum"),
                            ("diamond", "Diamond"),
                        ],
                        default="bronze",
                        max_length=20,
                    ),
                ),
                ("total_earned", models.IntegerField(default=0)),
                ("total_spent", models.IntegerField(default=0)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="loyalty_points",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Loyalty Points",
                "unique_together": {("user",)},
            },
        ),
        migrations.CreateModel(
            name="PricePrediction",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("predicted_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "confidence_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                (
                    "prediction_type",
                    models.CharField(
                        choices=[
                            ("conservative", "Conservative"),
                            ("optimal", "Optimal"),
                            ("aggressive", "Aggressive"),
                            ("forecast", "Forecast"),
                        ],
                        max_length=30,
                    ),
                ),
                ("market_conditions", models.JSONField()),
                ("factors", models.JSONField()),
                ("predicted_at", models.DateTimeField(auto_now_add=True)),
                ("valid_until", models.DateTimeField()),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="price_predictions",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "ordering": ["-predicted_at"],
                "unique_together": {("product", "prediction_type", "predicted_at")},
            },
        ),
        migrations.CreateModel(
            name="ProductRecommendation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("collaborative", "Collaborative Filtering"),
                            ("content_based", "Content Based"),
                            ("trending", "Trending"),
                            ("similar", "Similar Products"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                ("explanation", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendations",
                        to="products.product",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_recommendations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-confidence_score", "-created_at"],
                "unique_together": {("user", "product", "recommendation_type")},
            },
        ),
        migrations.CreateModel(
            name="VendorAnalytics",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("sales_performance", "Sales Performance"),
                            ("product_performance", "Product Performance"),
                            ("customer_insights", "Customer Insights"),
                            ("quality_metrics", "Quality Metrics"),
                            ("revenue_breakdown", "Revenue Breakdown"),
                            ("geographic_insights", "Geographic Insights"),
                            ("trend_analysis", "Trend Analysis"),
                            ("recommendations", "Recommendations"),
                        ],
                        max_length=50,
                    ),
                ),
                ("data", models.JSONField()),
                ("period_start", models.DateTimeField()),
                ("period_end", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                (
                    "vendor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Vendor Analytics",
                "ordering": ["-created_at"],
                "unique_together": {("vendor", "data_type", "period_start", "period_end")},
            },
        ),
    ]
